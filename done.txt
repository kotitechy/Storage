

a)A Program for First Come First Serve (FCFS) Scheduling Algorithm
#include<stdio.h>
int main()
{
int n,bt[20],wt[20],tat[20],avwt=0,avtat=0,i,j;
printf("Enter total number of processes(maximum 20):");
scanf("%d",&n);
printf("\nEnter Process Burst Time\n");
for(i=0;i<n;i++)
{
printf("P[%d]:",i+1);
scanf("%d",&bt[i]);
}
wt[0]=0; //waiting time for first process is 0
//calculating waiting time
for(i=1;i<n;i++)
{
wt[i]=0;
for(j=0;j<i;j++)
wt[i]+=bt[j];
}
printf("\nProcess\t\tBurst Time\tWaiting Time\tTurnaround Time");
//calculating turnaround time
for(i=0;i<n;i++)
{
tat[i]=bt[i]+wt[i];
avwt+=wt[i];
avtat+=tat[i];
printf("\nP[%d]\t\t%d\t\t%d\t\t%d",i+1,bt[i],wt[i],tat[i]);
}
avwt/=i;
avtat/=i;
printf("\n\nAverage Waiting Time:%d",avwt);
printf("\nAverage Turnaround Time:%d",avtat);
return 0;
}


b) A Program for Shortest Job First (SJF) Scheduling Algorithm
#include<stdio.h>
void main()
{
int bt[20],p[20],wt[20],tat[20],i,j,n,total=0,pos,temp;
float avg_wt,avg_tat;
printf("Enter number of process:");
scanf("%d",&n);
printf("\nEnter Burst Time:\n");
for(i=0;i<n;i++)
{
printf("p%d:",i+1);
scanf("%d",&bt[i]);
p[i]=i+1; //contains process number
}
//sorting burst time in ascending order using selection sort
for(i=0;i<n;i++)
{
pos=i;
for(j=i+1;j<n;j++)
{
if(bt[j]<bt[pos])
pos=j;
}
temp=bt[i];
bt[i]=bt[pos];
bt[pos]=temp;
temp=p[i];
p[i]=p[pos];
p[pos]=temp;
}
wt[0]=0; //waiting time for first process will be zero
//calculate waiting time
for(i=1;i<n;i++)
{
wt[i]=0;
for(j=0;j<i;j++)
wt[i]+=bt[j];
total+=wt[i];
}
avg_wt=(float)total/n; //average waiting time
total=0;
printf("\nProcess\t Burst Time \tWaiting Time\tTurnaround Time");
for(i=0;i<n;i++)
{
tat[i]=bt[i]+wt[i]; //calculate turnaround time
total+=tat[i];
printf("\np%d\t\t %d\t\t %d\t\t\t%d",p[i],bt[i],wt[i],tat[i]);
}
avg_tat=(float)total/n; //average turnaround time
printf("\n\nAverage Waiting Time=%f",avg_wt);
printf("\nAverage Turnaround Time=%f\n",avg_tat);
}





a) A Program for Priority Scheduling Algorithm
#include<stdio.h>
int main()
{
int bt[20],p[20],wt[20],tat[20],pr[20],i,j,n,total=0,pos,temp,avg_wt,avg_tat;
printf("Enter Total Number of Process:");
scanf("%d",&n);
printf("\nEnter Burst Time and Priority\n");
for(i=0;i<n;i++)
{
printf("\nP[%d]\n",i+1);
printf("Burst Time:");
scanf("%d",&bt[i]);
printf("Priority:");
scanf("%d",&pr[i]);
p[i]=i+1; //contains process number
}
//sorting burst time, priority and process number in ascending order using selection
sort
for(i=0;i<n;i++)
{
pos=i;
for(j=i+1;j<n;j++)
{
if(pr[j]<pr[pos])
pos=j;
}
temp=pr[i];
pr[i]=pr[pos];
pr[pos]=temp;
temp=bt[i];
bt[i]=bt[pos];
bt[pos]=temp;
temp=p[i];
p[i]=p[pos];
p[pos]=temp;
}
wt[0]=0; //waiting time for first process is zero
//calculate waiting time
for(i=1;i<n;i++)
{
wt[i]=0;
for(j=0;j<i;j++)
wt[i]+=bt[j];
total+=wt[i];
}
avg_wt=total/n; //average waiting time
total=0;
printf("\nProcess\t Burst Time \tWaiting Time\tTurnaround Time");
for(i=0;i<n;i++)
{
tat[i]=bt[i]+wt[i]; //calculate turnaround time
total+=tat[i];
printf("\nP[%d]\t\t %d\t\t %d\t\t\t%d",p[i],bt[i],wt[i],tat[i]);
}
avg_tat=total/n; //average turnaround time
printf("\n\nAverage Waiting Time=%d",avg_wt);
printf("\nAverage Turnaround Time=%d\n",avg_tat);
return 0;
}











b)A Program on Round Robin Scheduling Algorithm
#include<stdio.h>
int main()
{
int count,j,n,time,remain,flag=0,time_quantum;
int wait_time=0,turnaround_time=0,at[10],bt[10],rt[10];
printf("Enter Total Process:\t ");
scanf("%d",&n);
remain=n;
for(count=0;count<n;count++)
{
printf("Enter Arrival Time and Burst Time for Process Number %d: ",count+1);
scanf("%d",&at[count]);
scanf("%d",&bt[count]);
rt[count]=bt[count];
}
printf("Enter Time Quantum:\t");
scanf("%d",&time_quantum);
printf("\n\nProcess\t|TurnaroundTime|Waiting Time\n\n");
for(time=0,count=0;remain!=0;)
{
if(rt[count]<=time_quantum&& rt[count]>0)
{
time+=rt[count];
rt[count]=0;
flag=1;
}
else if(rt[count]>0)
{
rt[count]-=time_quantum;
time+=time_quantum;
}
if(rt[count]==0 && flag==1)
{
remain--;
printf("P[%d]\t|\t%d\t|\t%d\n",count+1,time-at[count],time-at[count]-bt[count]);
wait_time+=time-at[count]-bt[count];
turnaround_time+=time-at[count];
flag=0;
}
if(count==n-1)
count=0;
else if(at[count+1]<=time)
count++;
else
count=0;
}
printf("\n Average Waiting Time= %f\n",wait_time*1.0/n);
printf("Avg Turnaround Time = %f",turnaround_time*1.0/n);
return 0;
}

//producer consumer
Program:
#include <stdio.h>
#include <stdlib.h>

// Initialize a mutex to 1
int mutex = 1;

// Number of full slots as 0
int full = 0;

// Number of empty slots as size
// of buffer
int empty = 10, x = 0;

// Function to produce an item and
// add it to the buffer
void producer()
{
// Decrease mutex value by 1
--mutex;

// Increase the number of full
// slots by 1
++full;

// Decrease the number of empty
// slots by 1
--empty;
// Item produced
x++;
printf("\nProducer produces"
"item %d",
x);

// Increase mutex value by 1
++mutex;
}

// Function to consume an item and
// remove it from buffer
void consumer()
{
// Decrease mutex value by 1
--mutex;

// Decrease the number of full
// slots by 1
--full;

// Increase the number of empty
// slots by 1
++empty;
printf("\nConsumer consumes "
"item %d",
x);
x--;

// Increase mutex value by 1
++mutex;
}

// Driver Code
int main()
{
int n, i;
printf("\n1. Press 1 for Producer"
"\n2. Press 2 for Consumer"
"\n3. Press 3 for Exit");

// Using '#pragma omp parallel for'
// can give wrong value due to
// synchronization issues.

// 'critical' specifies that code is
// executed by only one thread at a
// time i.e., only one thread enters
// the critical section at a given time
#pragma omp critical

for (i = 1; i > 0; i++) {

printf("\nEnter your choice:");
scanf("%d", &n);

// Switch Cases
switch (n) {
case 1:

// If mutex is 1 and empty
// is non-zero, then it is
// possible to produce
if ((mutex == 1)
&& (empty != 0)) {
producer();
}

// Otherwise, print buffer
// is full
else {
printf("Buffer is full!");
}
break;

case 2:

// If mutex is 1 and full
// is non-zero, then it is
// possible to consume
if ((mutex == 1)
&& (full != 0)) {
consumer();
}

// Otherwise, print Buffer
// is empty
else {
printf("Buffer is empty!");
}
break;

// Exit Condition
case 3:
exit(0);
break;
}
}
}

#include<stdio.h>

// Function to allocate memory to
// blocks as per First fit algorithm
void firstFit(int blockSize[], int m, int processSize[], int n)
{
int i, j;
// Stores block id of the
// block allocated to a process
int allocation[n];

// Initially no block is assigned to any process
for(i = 0; i < n; i++)
{
allocation[i] = -1;
}

// pick each process and find suitable blocks
// according to its size ad assign to it
for (i = 0; i < n; i++)	 //here, n -> number of processes
{
for (j = 0; j < m; j++)	 //here, m -> number of blocks
{
if (blockSize[j] >= processSize[i])
{
// allocating block j to the ith process
allocation[i] = j;

// Reduce available memory in this block.
blockSize[j] -= processSize[i];

break; //go to the next process in the queue
}
}
}

printf("\nProcess No.\tProcess Size\tBlock no.\n");
for(i = 0; i < n; i++)
{
printf(" %i\t\t\t", i+1);
printf("%i\t\t\t\t", processSize[i]);
if (allocation[i] != -1)
printf("%i", allocation[i] + 1);
else
printf("Not Allocated");
printf("\n");
}
}

// Driver code
int main()
{
int m; //number of blocks in the memory
int n; //number of processes in the input queue
int blockSize[] = {100, 500, 200, 300, 600};
int processSize[] = {212, 417, 112, 426};
m = sizeof(blockSize) / sizeof(blockSize[0]);
n = sizeof(processSize) / sizeof(processSize[0]);

firstFit(blockSize, m, processSize, n);

return 0 ;
}
output:
Process No.     Process Size    Block no.
1                      212                             2
2                      417                             5
3                      112                             2
4                      426                             Not Allocated

--------------------------------
Process exited after 0.007222 seconds with return value 0
Press any key to continue . . .






/* FIFO Page Replacement Algorithm */
#include<stdio.h>
#include<conio.h>
int i,j,nof,nor,flag=0,ref[50],frm[50],pf=0,victim=-1;
void main()
{
      printf("\n \t\t\t FIFI PAGE REPLACEMENT ALGORITHM");
       printf("\n Enter no.of frames....");
       scanf("%d",&nof);
       printf("Enter number of reference string..\n");
       scanf("%d",&nor);
       printf("\n Enter the reference string..");
       for(i=0;i<nor;i++)
       scanf("%d",&ref[i]);
       printf("\nThe given reference string:");
       for(i=0;i<nor;i++)
       printf("%4d",ref[i]);
       for(i=1;i<=nof;i++)
       frm[i]=-1;
       printf("\n");	
       for(i=0;i<nor;i++)	
       {	
      flag=0;	
      printf("\n\t Reference np%d->\t",ref[i]);
      for(j=0;j<nof;j++)
      {
       if(frm[j]==ref[i])
      {
       flag=1;
       break;
       }
}
       if(flag==0)
      {
       pf++;
       victim++;
       victim=victim%nof;
       frm[victim]=ref[i];
       for(j=0;j<nof;j++)
       printf("%4d",frm[j]);
}
 }
      printf("\n\n\t\t No.of pages faults...%d",pf);
}


/*OPTIMAL(LFU) page replacement algorithm*/
#include<stdio.h>
#include<conio.h>
int i,j,nof,nor,flag=0,ref[50],frm[50],pf=0,victim=-1;
int recent[10],optcal[50],count=0;
int optvictim();
void main()
{
	 printf("\n OPTIMAL PAGE REPLACEMENT ALGORITHN");
       printf("\n.................................");
       printf("\nEnter the no.of frames");
      scanf("%d",&nof);
      printf("Enter the no.of reference string");
      scanf("%d",&nor);
       printf("Enter the reference string");
      for(i=0;i<nor;i++)
      scanf("%d",&ref[i]);
      clrscr();
      printf("\n OPTIMAL PAGE REPLACEMENT ALGORITHM");
      printf("\n................................");
      printf("\nThe given string");
      printf("\n....................\n");
      for(i=0;i<nor;i++)
      printf("%4d",ref[i]);
      for(i=0;i<nof;i++)
      {
       frm[i]=-1;
      optcal[i]=0;
       }
      for(i=0;i<10;i++)
       recent[i]=0;
       printf("\n");
      for(i=0;i<nor;i++)
      {
      flag=0;
      printf("\n\tref no %d ->\t",ref[i]);
      for(j=0;j<nof;j++)
      {
			if(frm[j]==ref[i])
			{
				flag=1;
				 break;
			}
      }
       if(flag==0)
      {
			count++;
			if(count<=nof)
			 victim++;
			else
			victim=optvictim(i);
			pf++;
			frm[victim]=ref[i];
			for(j=0;j<nof;j++)
			printf("%4d",frm[j]);		
      }
      }
      printf("\n Number of page faults: %d",pf);
}
int optvictim(int index)
{
      int i,j,temp,notfound;
      for(i=0;i<nof;i++)
      {
      notfound=1;
      for(j=index;j<nor;j++)
		if(frm[i]==ref[j])
		{
			 notfound=0;
			optcal[i]=j;
			break;
		}	
      if(notfound==1)
			   return i;
	}
       temp=optcal[0];
      for(i=1;i<nof; i++)
      if(temp<optcal[i])
	 temp=optcal[i];
      for(i=0;i<nof;i++)
      if(frm[temp]==frm[i])
	 return i;
      return 0;
}
/* LRU Page Replacement Algorithm  */
#include<stdio.h>
#include<conio.h>
int i,j,nof,nor,flag=0,ref[50],frm[50],pf=0,victim=-1;
int recent[10],lrucal[50],count=0;
int lruvictim();
void main()
{
      printf("\n\t\t\t LRU PAGE REPLACEMENT ALGORITHM");
      printf("\n Enter no.of Frames....");
      scanf("%d",&nof);
	printf(" Enter no.of reference string..");
      scanf("%d",&nor);
	printf("\n Enter reference string..");
      for(i=0;i<nor;i++)
      scanf("%d",&ref[i]);
      printf("\n\n\t\t LRU PAGE REPLACEMENT ALGORITHM ");
      printf("\n\t The given reference string:");
      printf("\n......................................");
      for(i=0;i<nor;i++)
      printf("%4d",ref[i]);
      for(i=1;i<=nof;i++)
      {
      frm[i]=-1;
       lrucal[i]=0;
}
      for(i=0;i<10;i++)
      recent[i]=0;
      printf("\n");
      for(i=0;i<nor;i++)
      {
      
      
      flag=0;
      printf("\n\t Reference NO %d->\t",ref[i]);
      for(j=0;j<nof;j++)
      {
       if(frm[j]==ref[i])
      {
			flag=1;
			 break;
      }
      }
      if(flag==0)
      {
      count++;
       if(count<=nof)
      victim++;	
       else
       victim=lruvictim();
       pf++;
      frm[victim]=ref[i];
      for(j=0;j<nof;j++)
      printf("%4d",frm[j]);
      }
      recent[ref[i]]=i;
         }
         printf("\n\n\t No.of page faults...%d",pf);
         getch();
}
int lruvictim()
{
      int i,j,temp1,temp2;
      for(i=0;i<nof;i++)
      {
      temp1=frm[i];
      lrucal[i]=recent[temp1];
        }
         temp2=lrucal[0];
        for(j=1;j<nof;j++)
       {
       if(temp2>lrucal[j])
       temp2=lrucal[j];
        }
        for(i=0;i<nof;i++)
        if(ref[temp2]==frm[i])
        return i;
        return 0;}

a)t Sequential File Allocation method.

  
      
      PROGRAM
#include<stdio.h>
#include<conio.h>
main()
{
 int n,i,j,b[20],sb[20],t[20],x,c[20][20];
 clrscr();
 printf("Enter no.of files:");
 scanf("%d",&n);
 for(i=0;i<n;i++)
 {
	printf("Enter no. of blocks occupied by file%d",i+1);
	scanf("%d",&b[i]);
	printf("Enter the starting block of file%d",i+1);
	scanf("%d",&sb[i]);
	t[i]=sb[i];
	for(j=0;j<b[i];j++)
		c[i][j]=sb[i]++;
	}



 printf("Filename\tStart block\tlength\n");
 for(i=0;i<n;i++)
printf("%d\t  %d \t%d\n",i+1,t[i],b[i]);
 printf("Enter file name:");
 scanf("%d",&x);
 printf("File name is:%d",x);
 printf("length is:%d",b[x-1]);
 printf("blocks occupied:");
 for(i=0;i<b[x-1];i++)
	printf("%4d",c[x-1][i]);
 getch();
}


















b) Indexed File Allocation method.

      
      
      
      
      
      
      PROGRAM
#include<stdio.h>
main()
{
 int n,m[20],i,j,sb[20],s[20],b[20][20],x;
 printf("Enter no. of files:");
scanf("%d",&n);
 for(i=0;i<n;i++)
 {	printf("Enter starting block and size of file%d:",i+1);
	scanf("%d%d",&sb[i],&s[i]);
	printf("Enter blocks occupied by file%d:",i+1);
	scanf("%d",&m[i]);
	printf("enter blocks of file%d:",i+1);
	for(j=0;j<m[i];j++)
		scanf("%d",&b[i][j]);
 } printf("\nFile\t index\tlength\n");
 for(i=0;i<n;i++) {
	printf("%d\t%d\t%d\n",i+1,sb[i],m[i]);
 }
}












C)Linked File Allocation method.      
      PROGRAM
#include<stdio.h>
#include<conio.h>
struct file
{
 char fname[10];
 int start,size,block[10];
}f[10];
main()
{
       int i,j,n;
      printf("Enter no. of files:");
       scanf("%d",&n);
       for(i=0;i<n;i++)
       {
       printf("Enter file name:");
       scanf("%s",&f[i].fname);
       printf("Enter starting block:");
       scanf("%d",&f[i].start);
       f[i].block[0]=f[i].start;
       printf("Enter no.of blocks:");
       scanf("%d",&f[i].size);
       printf("Enter block numbers:");
       for(j=1;j<=f[i].size;j++)
       {
			scanf("%d",&f[i].block[j]);
       }
       }
       printf("File\tstart\tsize\tblock\n");
       for(i=0;i<n;i++)
       {
      
      
      
      
		printf("%s\t%d\t%d\t",f[i].fname,f[i].start,f[i].size);
		for(j=1;j<=f[i].size-1;j++)
		printf("%d--->",f[i].block[j]);
		printf("%d",f[i].block[j]);
		printf("\n");
       }
}
